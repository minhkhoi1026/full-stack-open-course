{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","exportObj","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","setTimeout","n","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.804c3b49.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n      {note.content} <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n    <div className=\"error\">\r\n        {message}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = 'https://afternoon-reef-02984.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response =>  response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst exportObj = { getAll, create, update }\r\nexport default exportObj","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // fetch data from server\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n  \n  // configure for showing note\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  // event handler for toggle button click\n  const toggleImportance = (id) => {\n    const note = notes.find(note => (note.id === id))\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n    .update(id, changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  // event handler to add new note to notes\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  // function to handle new note input\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n\n      <ul>\n        {notesToShow.map(note => \n          <Note \n          key={note.id} \n          note={note} \n          toggleImportance={() => toggleImportance(note.id)} \n          />\n        )}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}